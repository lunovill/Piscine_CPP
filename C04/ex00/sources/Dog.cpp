#include "Dog.hpp"

/********************************************************************************/
/* ------------------------------- CONSTRUCTOR -------------------------------- */
/********************************************************************************/

Dog::Dog(void) : Animal("Dog") {
	std::cout << ansi((short[]){BOLD, GREEN}, 2) + "Default constructor called for " + __func__ + " of type " + this->_type + "." << std::endl;
	return ;
}

Dog::Dog(Dog &copy) : Animal(copy) {
	std::cout << ansi((short[]){BOLD, GREEN}, 2) + "Copy constructor called for " + __func__ + " of type " + this->_type + "." << std::endl;
	return ;
}

/********************************************************************************/
/* -------------------------------- DESTRUCTOR -------------------------------- */
/********************************************************************************/

Dog::~Dog(void) {
	std::cout << ansi((short[]){BOLD, RED}, 2) + "Default constructor called for " + __func__ + "." << std::endl;
	return ;
}

/********************************************************************************/
/* --------------------------------- OVERLOAD --------------------------------- */
/********************************************************************************/

Dog	&Dog::operator=(const Dog &rhs) {
	if (this != &rhs)
		Animal::operator=(rhs);
	return *this;
}

/********************************************************************************/
/* --------------------------------- METHODS ---------------------------------- */
/********************************************************************************/

void	Dog::makeSound(void) const {
	std::cout << ansi((short[]){HIGHLIGHT, ITALIC, YELLOW}, 3) + "\"Woaf!\"";
	return ;
}

/********************************************************************************/
/* --------------------------------- ACCESSOR --------------------------------- */
/********************************************************************************/

std::string	Dog::getType(void) const { return ansi((short[]){BOLD, ITALIC, YELLOW}, 3) + this->_type; }

/********************************************************************************/
